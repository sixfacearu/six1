interface Token {

   
    function totalSupply() constant returns (uint256 supply); 

  
    function balanceOf(address _owner) constant returns (uint256 balance); 

   
    function transfer(address _to, uint256 _value) returns (bool success); 

   
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success); 

  
    function approve(address _spender, uint256 _value) returns (bool success); 

   
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    
}
pragma solidity ^0.4.0;
import "./Untitled6.sol";
contract bank{
    
    mapping(address=>uint256)map;
      mapping(address=> mapping(address=>uint256))allowed;
    
 function totalSupply(uint256 value)  {
         map[msg.sender]=value;
        
         
     }
 function balanceOf(address _owner) constant returns (uint256 balance) {
     return map[_owner];
 }
  function transfer(address _to, uint256 _value) returns  (bool success) {
      if(map[msg.sender]>=_value&&map[msg.sender]>0){
      map[_to]=_value;
      map[msg.sender]-=_value;
      map[_to]+=_value;
      return true;}
      else{
      return false;}
      
  }
  function transferFrom(address  _from, address _to, uint256 _value) returns (bool success){
       if (map[_from] >= _value || allowed[msg.sender][_from] >= _value && _value > 0) {
            map[_to] += _value;
            allowed[msg.sender][_from] -= _value;
            map[msg.sender]-=_value;
            return true;
        } else { return false; }

  }
 
 function approve(address _spender, uint256 _value) returns (bool success)
 {
     allowed[msg.sender][_spender]=_value;
    //map[msg.sender]-=_value;
     return true;
 }
 function allowance(address owner, address _spender) constant returns (uint256 remaining) {
    return allowed[owner][_spender];
 }
}
