pragma solidity ^0.4.0;
contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
   function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
   function increaseApproval(address spender, uint addedValue) public returns (bool);
   function decreaseApproval(address spender, uint subtractedValue) public returns (bool);
   function mint(address _to, uint256 _amount) public returns (bool);
}
pragma solidity ^0.4.0;
  import "./token2.sol";
contract token{
    string name="aru";
    string sympol="sixface";
    uint256 decimal=18;
    mapping(address=>uint256)bank;
    mapping(address=>mapping(address=>uint256))apprve;
    
   function totalSupply(uint256 tokens) public {
       bank[msg.sender]=tokens;
   }
   function balanceOf(address who) public view returns (uint256){
      return bank[who];}
    function transfer(address to, uint256 value) public returns (bool){
        if(bank[msg.sender]>value&&value>0)
        bank[to]+=value;
        bank[msg.sender]-=value;
    }
    function approve(address spender, uint256 value) public returns (bool){
        if(bank[msg.sender]>value&&value>0)
        apprve[spender][msg.sender]+=value;
       // bank[msg.sender]-=value;
        
    }
    function allowance(address owner, address spender) public view returns (uint256){
        return apprve[spender][owner];
    }
    
    function transferFrom(address from, address to, uint256 value) public returns (bool){
        if(apprve[from][msg.sender]>value && value>0)
        bank[to]+=value;
        apprve[from][msg.sender]-=value;
        bank[msg.sender]-=value;
        
    }
     function increaseApproval(address spender, uint addedValue) public returns (bool) {
         if(bank[msg.sender]>addedValue&&addedValue>0)
        apprve[spender][msg.sender]+=addedValue;
        //bank[msg.sender]-=addedValue;
     }
     function decreaseApproval(address spender, uint subtractedValue) public returns (bool){
         if(subtractedValue<=apprve[spender][msg.sender] && subtractedValue>0)
             apprve[spender][msg.sender]-=subtractedValue;
            // bank[msg.sender]+=subtractedValue;
        
     }
      function mint(address _to, uint256 _amount) public returns (bool) {
          bank[_to]+=_amount;
      }
}
